%% Previously hidden intraspecies dynamics underlie the apparent stability of two important skin microbiome species
%  Baker et al. 2025, Cell Host & Microbe

%  This file calls the functions required to reproduce the figures in the paper.

%  Required code is located in ./scripts
%  Required data is in ./data:
%       Files small enough to be uploaded onto GitHub are in this repository
%       A Dropbox link to precomputed data structures too large for GitHub can be found in the readme in this repository. 
%       the function saveSupplementaryTablesExcel at the end of this file
%       parses these data into Tables S1-S6 available online.
  
%  Snakemake files to recreate these data from raw reads are in /snakemakes

%  Code to run PHLAME (beta version) can be found at: https://github.com/quevan/phlame_beta/blob/main/Snakefile_makedb.py
%  Some code in this repository requires the use of GPUs and potentiall an HPC cluster to run efficiently.

%% required paths
% Path to MATLAB scripts
path(pwd,path);
path('scripts/',path);
path('data/',path);
% For making colormaps
% Scott Lowe (2025). cbrewer2 (https://github.com/scottclowe/cbrewer2), GitHub. Retrieved March 26, 2025.
% https://www.mathworks.com/matlabcentral/fileexchange/58350-cbrewer2
path('scripts/cbrewer2',path);

%% load manuscript colors
% Contains colors from Matsataka Okabe and Kei Ito
% https://jfly.uni-koeln.de/html/manuals/pdf/color_blind.pdf
load data/ColorBlind.mat ColorBlind
ManuscriptColors = load_manuscript_colors(ColorBlind);

%% Determine which isolates are C. acnes and S. epidermidis (Table S2, Methods: Filtering isolates)
% Parses CDHIT data structure, which was run on genome assemblies from all isolates and NCBI reference genomes, 
% then identifies which isolates are S. epidermidis or C. acnes.

% These data were only used for an initial filtering step to identify the species of isolates,
% as they were grown in permissive culture conditions and without re-streaking in order to prevent the accumulation of SNPs
% such that some isolates we sequenced contained mixed genotypes from multiple colonies or belong to different species.

% Pre-computed assembly statistics for each isolate assembly from snakemake
AssemblyStats=readtable('data/sumStats_assembly_annotation.tsv','FileType','text','Delimiter',{' ','\t'},'ReadVariableNames',1);

% Information on each reference from NCBI used in filtering
ncbi_references = readtable('data/ncbi_reference_genomes.csv');

% The output structure from CDHIT for each assembled isolate genome and each reference from NCBI
% this file was computed from the command line (cd-hit -i 90) from the annotation
% files generated by Prokka
% (snakemakes/1a_isolate_reference_mapping_assembly_for_qc) and each reference genome assembly
cdhit_isolate_assemblies_90percent='data/isolate_filtering/cdhit_results.clstr';

% Parse the data into a MATLAB data structure
CDHITData=parse_cdhit_isolates(cdhit_isolate_assemblies_90percent,AssemblyStats,ncbi_references);

% Filters isolate based on their core genome content (Methods)
% This function outputs the samplenames of isolates which are putatively C. acnes and S. epidermidis
[SampleNames_sepi_core_genome_filter, SampleNames_cacnes_core_genome_filter]=core_genome_filter(CDHITData,AssemblyStats,ncbi_references);

%% Cluster isolates into lineages (Methods: Calculating pairwise SNP distances for clustering lineage,Clustering isolates into lineages)
% These candidate mutation tables contains alignment information for each isolate for both species
% which were generated with snakemakes/1b_isolate_candidate_mutation_table

% They are very large and may not open locally without sufficient RAM

% Some alignments for pilot metagenome samples are also in these files but these
% data were not used-- they are included here only for reproducibility (they are removed in the next step)

% the filenames represent the reference genomes used (Pacnes_C1 and SepidermidisATCC12228)
candidate_mutation_table_cacnes='data/Pacnes_C1_candidate_mutation_table.mat';
candidate_mutation_table_sepi='data/SepidermidisATCC12228_candidate_mutation_table.mat';

% To prevent crashing, they can be re-sized using resize_candidate_mutation_table.m
% These files are virtually only used to generate distance matrices (and generate QC plots)
% but are not used for main text figures
% CacnesUnfilteredMutationVars = resize_candidate_mutation_table(candidate_mutation_table_cacnes);
% SepiUnfilteredMutationVars = resize_candidate_mutation_table(candidate_mutation_table_sepi);

% The precomputed files are here:
CacnesUnfilteredMutationsFile='data/Pacnes_C1_UnfilteredMutationVars.mat';
SepiUnfilteredMutationsFile='data/SepidermidisATCC12228_UnfilteredMutationVars.mat';

% Precomputes inputs to calculate distance matrixes using GPU arrays
% for both species because this otherwise has a lot of overhead to calculate exactly
DMinputs = get_DMinputs(SepiUnfilteredMutationVars,CacnesUnfilteredMutationVars, SampleNames_sepi_core_genome_filter,SampleNames_cacnes_core_genome_filter);

% Generate distance matrices for clustering isolates into lineages
% This step was run on Slurm based HPC
% Other distance matrices are calculated which are not used for anything but are included for reproducibility
DMs=calculate_distance_matrices(DMinputs);
% these are the precomputed distance matrices for both species
distance_matrices = 'data/distance_matrices.mat';

% Runs clustering across a range of parameters
% This step was run on Slurm based HPC
% and takes hours to days to run even with many CPUs

% There are precomputed data files har-coded in the scripts called in this
% module which can generate numerous QC plots not shown in this paper

%   run_clustering.m

% Otherwise, these are the clusters used in this paper
sepi_clusters=load('data/sepi_clusters.mat','clusters');sepi_clusters=sepi_clusters.clusters;
cacnes_clusters=load('data/cacnes_clusters.mat','clusters');cacnes_clusters=cacnes_clusters.clusters;

%% Get outgroups to assemble lineage coassemblies (table S5, Methods: Within lineage SNPs)
% takes row of sample information from cluster and
% fills in outgroups for each lineage to make lineage coassemblies
Tbl = 'data/samplesheet_clustered_isolates.csv';
distance_matrices = 'data/distance_matrices.mat';
[Tbl_outgroups] =  fill_outgroups(T,distance_matrices,CacnesUnfilteredMutationsFile,SepiUnfilteredMutationsFile);
% writetable('data/cluster_assemblies_with_outgroup_no_singletons_no_doubletons.csv','Tbl_outgroups');

%% Once assembled (snakemake/3a_lineage_coassembly) cut clade coassembly short/low coverage contigs (table S5, Methods: Within lineage SNPs)
% this script iterrates through genomes to generate cutoff heights

% cut_clade_assemblies(Tbl_otgroups)
% cutoff heights chosen are in data/CladeAssemblyCutoffHeights.mat

%% identity de novo mutations in lineages and make phylogenies (Tables S4-S6, Methods: Within lineage SNPs)
% Requires the list of samples to extract the clade names and the directory
% same as Tbl_otgroups above
SamplesCSV = readtable('data/cluster_assemblies_with_outgroup_no_singletons_no_doubletons.csv');

% directory with genomes and .mat files
dir_lineage_coassemblies = 'data/clade_coassemblies';

% where to put the trees
dir_phylogenies='data/lineage_phylogenies';

% Wrapper function. has hard-coded parameters and requires dnapars executable to generate trees
%   Requires clade coassemblies (above) then running Bakta (v1.6.1, run on command line)
%   Then, running snakemakes/3b_lineage_coassemblies_candidate_mutation_table_cacnes
%   which maps the reads of all isolates in a cluster (and outgroup samples) to the lineage co-assembly
% returns SNP data on each lineage (LineageData) as welll as annotations for individual SNPs
% precomputed:
% load data/LineageData.mat
% data/cacnes_annotations_all.mat
% data/sepi_annotations_all.mat
[LineageData,cacnes_annotations_all,sepi_annotations_all]=de_novo_muts(SamplesCSV,dir_lineage_coassemblies,dir_phylogenies);

% find how well samples are called 
% Figure S24
% note to test
plot_proportion_muts_called(LineageData)

%% Parse metagenomics data (Table S1, S3, Methods: Metagenomic lineage and phylotype abundances, Filtering metagenomic samples)

% load structure which was done by tube
load data/all_metagenomics_tubes_filtered.mat M_all_filtered
% then get the data Evan generated with the beta version of PHLAME
% files are hard coded 
ConcatenatedReadData = get_ConcatenatedReadsPHLAMEData;
[Msubject, MsubjectTime, Mtubes]=parse_metagenomics_tubes(M_all_filtered,ConcatenatedReadData);

% Filter lineages, create isolate and lineage data tables (tables S4-5)
[IT,LineageData] = LineageDataToTable(LineageData);

% excludes lineages from metagenomics which are found on handler subjects or part of mock communities
[Msubject,MsubjectTime,Mtubes]=exclude_lineages(IT,Msubject,MsubjectTime,Mtubes);

% Combine loose and strict metagenomics information
% adds combined metagenomics data to subject timepoint data
% this was done manually for some stuff but later manually added to the
% PHLAME pipeline (Methods)
MsubjectTime=combine_loose_strict(MsubjectTime);
Msubject=combine_loose_strict(Msubject);

%% save data to prevent regenerating

%% Histograms of pairwise tubes to total concatenated kits
% Figure S1
% takes a long time to render
[SepiPhyloTubes,pvs_all_sepi] = plot_clade_site_specificity(Mtubes,Mtubes.SepiPhylotypeAbundance,'S. epidermidis phylotypes');
[CacnesPhyloTubes,pvs_all_cacnes] = plot_clade_site_specificity(Mtubes,Mtubes.CacnesPhylotypeAbundance,'C. acnes phylotypes');
sig_ps_cacnes = bh_fdr(str2double(pvs_all_cacnes),.05);
sig_ps_sepi = bh_fdr(str2double(pvs_all_sepi),.05);

%% Cluster subjects based on species-metagenomics abundances (Methods: Species and genus-level microbiome composition)
% Figure 2C-D, Figure S2A-B, Figure S3C-E
MsubjectTime=facial_cutotypes(MsubjectTime,ManuscriptColors);

% Add cutotype information to other metagenomics sample tables
clusters_subjecttime_bracken_species = MsubjectTime.clusters_subjecttime_bracken_species;
% By subject
uSubjects = Msubject.SID;
SubjectsSubjectTime=MsubjectTime.SID;
subject_cutotype=arrayfun(@(x) max(clusters_subjecttime_bracken_species(x==SubjectsSubjectTime)), uSubjects);
subject_cutotype(Msubject.Age>18)=3;

% individual locations
Mtubes.subject_cutotype=arrayfun(@(x) subject_cutotype(x==uSubjects), Mtubes.SID);
MsubjectTime.subject_cutotype=arrayfun(@(x) subject_cutotype(x==uSubjects), MsubjectTime.SID);
Msubject.subject_cutotype=subject_cutotype;

% age distributions in tubes, subject-timepoint samples, and subjects of different categories
% Figure S2D
plot_facial_cutotypes_ages(MsubjectTime,Msubject,ManuscriptColors)

% Main text values for the median age at sampling for FC1 and FC2 kits
MedianFC1AgeSubjectTime=round(median(MsubjectTime.Age(MsubjectTime.clusters_subjecttime_bracken_species==1&~contains(MsubjectTime.SID,"P"))),1,'decimal');
MedianFC2AgeSubjectTime=round(median(MsubjectTime.Age(MsubjectTime.clusters_subjecttime_bracken_species==2&~contains(MsubjectTime.SID,"P"))),1,'decimal');
['FC1 communities are found primarily on samples from younger children (median =' char(string(MedianFC1AgeSubjectTime)) ' years)']
['FC2 communities are found primarily on samples from older children (median =' char(string(MedianFC2AgeSubjectTime)) ' years)']

% Pull out number of nonhuman reads for all samples
% (prints main text value)
% first need to load the raw bracken reports again
BrackenReports = './data/metagenomics_bracken_reports/';
RawBrackenData=Brackenfiles2Structure(string(vertcat(Mtubes.SampleNames{:})),BrackenReports);

% find the number of reads in the sample we're using
MsubjectTime.FilteredSpeciesLevelReads = get_nonhuman_reads(Mtubes,MsubjectTime,RawBrackenData);
% Pull out ratios per subject 
Msubject=get_species_human_ratio(Msubject,RawBrackenData);

% Figure S3E-F
% Changes in S. epidermidis and C. acnes abundances over time and in different age groups 
p=plot_sepi_cacnes_abundance(Msubject,MsubjectTime,ManuscriptColors.CutotypeColors);

% Species-level alpha diversity in all subjects in different age groups
% Figure S3B
f=alpha_diversity_subject(MsubjectTime,ManuscriptColors.CutotypeColors); % each dot it a subject, used concatenated data from umap projection

% Pull out information for adult subject with unusual abundance
% Figure S3A
% 11PA is an adult subject with unusual composition
p=bracken_stackedbar_maker(Mtubes(Mtubes.SID=="11PA",:),.01);

%% main text values for numbers of isolates and lineages

% number of S. epi or C. acnes isolates per subject/timepoint
TSepi=tabulate(IT.SubjectTime(IT.SpeciesString=="sepi"));
TCacnes=tabulate(IT.SubjectTime(IT.SpeciesString=="cacnes"));

NSepi = vertcat(TSepi{:,2});
NCacnes = vertcat(TCacnes{:,2});

% parse IT (isolate table) into per-sample arrays
[IsolateArrays] = IsolateTimepointAbundances(IT,MsubjectTime);
NCacnes = sum(IsolateArrays.CacnesIsolates,2);
NSepi = sum(IsolateArrays.SepiIsolates,2);
Ntotal =cellstr(string(sum(NCacnes)+sum(NSepi)));

NCacnesLineages=numel(unique(IT.ClusterString(IT.SpeciesString=="cacnes")));
NSepiLineages=numel(unique(IT.ClusterString(IT.SpeciesString=="sepi")));

NIsolatesTotal =cellstr(string(sum(NCacnes)+sum(NSepi)));
NLineagesTotal =cellstr(string(sum(NCacnesLineages)+sum(NSepiLineages)));

NCacnes = cellstr(string([min(NCacnes) median(NCacnes) max(NCacnes) sum(NCacnes)]));
NSepi = cellstr(string([min(NSepi) median(NSepi) max(NSepi) sum(NSepi)]));


% main text claims
['we obtained whole genomes from ' NCacnes{1} '-' NCacnes{3} ' C. acnes (median = ' NCacnes{2} ')']
['we obtained whole genomes from ' NSepi{1} '-' NSepi{3} ' S. epidermidis (median = ' NSepi{2} ')']
['The total of ' Ntotal{:} ' isolates were clustered into ' NLineagesTotal{:} ' lineages']

%% stacked histogram bars of max within lineage dMRCAs (Methods: Lineage diversity and sharing across subjects)
% Figure 3A
% returns main text value
f=plot_within_cluster_distance(LineageData);

%% compares the number and abundance of lineages found in metagenomics and isolates (Methods: Lineage diversity and sharing across subjects)
% Figure S4A-H
cutoff_isolates=25;
cutoff_assigned=0.7;
cutoff_real=0.0; % set cutoff to 0 in order to observe if there are spuriously low abundances
[~,~]=compare_isolates_metagenomics(IT,MsubjectTime,cutoff_isolates,cutoff_assigned,cutoff_real);

%% based on filters for isolates and metagenome samples, count the number of coexisting lineages found in samples
% Figure 3B
% considers only samples with enough metagenomic and isolate data
[CacnesLineagesBothDataSources,SepiLineagesBothDataSources]=compare_isolates_metagenomics(IT,MsubjectTime,cutoff_isolates,cutoff_assigned,.01);

CacnesBool = sum(CacnesLineagesBothDataSources,2)>0;
SepiBool = sum(SepiLineagesBothDataSources,2)>0;
%% Find lineages with any evidence of sharing with data (Methods: Lineage diversity and sharing across subjects)
% considers samples with enough metagenomics OR isolate data
% in order to be prevent under-estimating the extent of lineage sharing
[CacnesLineagesEitherDataSource,SepiLineagesEitherDataSource]=find_any_evidence_of_sharing(IT,MsubjectTime,cutoff_isolates,cutoff_assigned,.01);

get_sharing_percentage(MsubjectTime,CacnesLineagesEitherDataSource,'C. acnes')
get_sharing_percentage(MsubjectTime,SepiLineagesEitherDataSource,'S.epidermidis')

%% Show that the majority of lineages on parents are not shared 

% consider only samples with a lot of isolates and metagenomics
Abundances=CacnesLineagesEitherDataSource;
proportion_found_both_parents(MsubjectTime,Abundances,'C. acnes')
Abundances=SepiLineagesEitherDataSource;
proportion_found_both_parents(MsubjectTime,Abundances,'S. epidermidis')

% consider samples with a lot of isolates OR good metagenomics
Abundances=CacnesLineagesBothDataSources;
proportion_found_both_parents(MsubjectTime,Abundances,'C. acnes')
Abundances=SepiLineagesBothDataSources;
proportion_found_both_parents(MsubjectTime,Abundances,'S. epidermidis')

%% Plots the bray-cutyis dissimilarity of related and related individuals (Methods: Lineage diversity and sharing across subjects)

% Figure S7
% Figure 4A
[f,f2]=plot_related_unrelated_diversity_CDF(MsubjectTime,.7,.01);

% show that this finding is robust by repeating only with samples with both sufficient isolates and metagenomes
plot_related_unrelated_diversity_CDF2(MsubjectTime,CacnesLineagesBothDataSources,SepiLineagesBothDataSources,.7,cutoff_real)
% show that this finding is robust by repeating across sample either isolates or metagenomes
plot_related_unrelated_diversity_CDF2(MsubjectTime,CacnesLineagesEitherDataSource,SepiLineagesEitherDataSource,.7,cutoff_real)

%% Simulations showing that lineages are not over-dispersed on individuals (Methods:Gene content within and across lineage assemblies,Calculating pairwise SNP distances for clustering lineage)
% Figure 3C
% Figure S5

% how many simulations to run
T=100000;
% Get pair-wise distance matrix
% GoodDMs.mat is the distance matrices actually used for clustering
load data/distance_matrices.mat % distance matrices used for clustering, so it contains pairwise distances between singleton and doubleton lineages
CacnesLineages=load('data/cacnes_clusters.mat');
SepiLineages=load('data/sepi_clusters.mat');

% get intercluster distance matrix
CacnesLineageNumbers=Msubject.CacnesLineageNumbers(1,:); % Ns of lineages you actually want to measure
CacnesClusterDM=intercluster_dm(CacnesDM,CacnesLineages.clusters,CacnesLineageNumbers);
SepiLineageNumbers=Msubject.SepiLineageNumbers(1,:); % Ns of lineages you actually want to measure
SepiClusterDM=intercluster_dm(SepiDM,SepiLineages.clusters,SepiLineageNumbers);

SID=MsubjectTime.SID;

% gene content differences amongst lineages from Panaroo (v1.5.0) 
% Figure S5A
PresenceAbsenseSepi = readtable('data/pangenome_sepi_lineages/gene_presence_absence.csv');
cladestrSepi="sepi_clade_";
% Figure S5B
% Same simulations as above, but for gene content instead of between-cluster distance
PresenceAbsenseCacnes = readtable('data/pangenome_cacnes_lineages/gene_presence_absence.csv');
cladestrCacnes="cacnes_clade_";

% gene content distance matrix (jaccard distance)
DM_cacnes_genecontent=get_dm_genecontent(CacnesLineageNumbers,PresenceAbsenseCacnes,cladestrCacnes);
DM_sepi_genecontent=get_dm_genecontent(SepiLineageNumbers,PresenceAbsenseSepi,cladestrSepi);

AllSumulations =figure;
% S. epi simulations
% Figure S5A
A=SepiLineagesBothDataSources;
DM=DM_sepi_genecontent;
[pA,SepiGenomeContentSimulations]=simulate_lineage_differences_subject(SID,A,DM,T,0);
pA.Position=[413         537        1349         404];
pA.Children(3).XLim=[.05 .2];
pA.Children(2).XLim=[0 .15];
pA.Children(1).XLim=[.1 .25];

% C. acnes simulations
% Figure S5B
A=CacnesLineagesBothDataSources;
DM=DM_cacnes_genecontent;
[pB,CacnesGenomeContentSimulations]=simulate_lineage_differences_subject(MsubjectTime.SID,A,DM_cacnes_genecontent,T,0);
pB.Position=[413         537        1349         404];
pB.Children(3).XLim=[.05 .2];
pB.Children(2).XLim=[0 .15];
pB.Children(1).XLim=[.1 .25];

% S. epi simulations
% Figure S5C
A=SepiLineagesBothDataSources;
DM=SepiClusterDM;
[pC,SepiGenomeDistanceSimulations]=simulate_lineage_differences_subject(SID,A,DM,T,0);
pC.Position=[413         537        1349         404];
pC.Children(3).XLim=[.5e4 2.5e4];
pC.Children(2).XLim=[0 10000];
pC.Children(1).XLim=[1e4 4e4];
% C. acnes simulations 
% Figure S5D
A=CacnesLineagesBothDataSources;
DM=CacnesClusterDM;
[pD,CacnesGenomeDistanceSimulations]=simulate_lineage_differences_subject(SID,A,DM,T,0);
pD.Position=[413         537        1349         404];
pD.Children(3).XLim=[.5e4 2.5e4];
pD.Children(2).XLim=[0 10000];
pD.Children(1).XLim=[1e4 4e4];
% Assume pA, pB, pC, pD are your four figure handles (each with 1x3 subplots)
figHandles = [pA, pB, pC, pD];

% Create a new figure for the 4x3 grid.
newFig = figure;
% Set the default font for all axes and text in the new figure to Helvetica.
set(newFig, 'DefaultAxesFontName', 'Helvetica', 'DefaultTextFontName', 'Helvetica');

% Loop over each of the four figures (each corresponds to one row)
for i = 1:length(figHandles)
    % Get all axes in the original figure.
    origAxes = findall(figHandles(i), 'Type', 'axes');
    % When using subplot, MATLAB sometimes returns axes in reverse order.
    origAxes = flipud(origAxes);
    
    % Loop over the 3 subplots in this figure.
    for j = 1:3
        newIndex = (i-1)*3 + j;
        % Create a new subplot in the new figure.
        newAx = subplot(4, 3, newIndex, 'Parent', newFig);
        
        % Copy the children (plots, lines, etc.) from the original axes into newAx.
        copyobj(get(origAxes(j), 'Children'), newAx);
        
        % Copy axes properties such as limits and scales.
        set(newAx, 'XLim', get(origAxes(j), 'XLim'), ...
                   'YLim', get(origAxes(j), 'YLim'), ...
                   'XScale', get(origAxes(j), 'XScale'), ...
                   'YScale', get(origAxes(j), 'YScale'));
               
        % Copy title and axis labels, if desired.
        title(newAx, get(get(origAxes(j), 'Title'), 'String'));
        xlabel(newAx, get(get(origAxes(j), 'XLabel'), 'String'));
        ylabel(newAx, get(get(origAxes(j), 'YLabel'), 'String'));
    end
end



%% Save the new figure as a vector PDF.
%%
% Pull out relavent simulations and plot them for main text
% Figure 3C
% plot cacnes and sepi simulations together
bw=.005;
f=figure;
histogram(CacnesGenomeContentSimulations.SimMin,'EdgeColor','black','FaceColor','white','FaceAlpha',.5,'BinWidth',bw)
hold on
histogram(SepiGenomeContentSimulations.SimMin,'EdgeColor','black','FaceColor','black','FaceAlpha',.5,'BinWidth',bw)
hold on
bar(CacnesGenomeContentSimulations.MinReal,3.5e4,'BarWidth',bw/2,'FaceColor','red','EdgeColor','white')
bar(SepiGenomeContentSimulations.MinReal,3.5e4,'BarWidth',bw/2,'FaceColor','red','EdgeColor','black')
xlim([0 .2])
pbaspect([1 1 1])
ylim([0 3.5e4])
xlabel('min genome content distance between coexisting lineages')
ylabel('number of simulations (T=100000)')
l=legend;
l.String={'Cacnes Simulations' 'Sepi Simulations' 'Cacnes Observed' 'Sepi Observed'};

%% average number of C. acnes lineages per subject which are not found on related family members (Methods: Lineage diversity and sharing across subjects)
% % Figure S8
MinAssigned=.7;
MinAbundance=.01;

Abundances=MsubjectTime.CombinedCacnesLineages;
f=unshared_clades_by_group(MsubjectTime,MinAssigned,MinAbundance,Abundances,ManuscriptColors);
%
Abundances=MsubjectTime.CombinedSepiLineages;
f=unshared_clades_by_group(MsubjectTime,MinAssigned,MinAbundance,Abundances,ManuscriptColors);


%% Bray curtis self-over-time at the lineage level (Methods: Lineage diversity and sharing across subjects)

% minimum clustered isolates to include subject/timepoint
min_iso=25;

% normalize isolate abundances
AsepiIso=IsolateArrays.SepiIsolates;
AcacnesIso=IsolateArrays.CacnesIsolates;
TotalSepi = sum(AsepiIso,2);
TotalCacnes=sum(AcacnesIso,2);
AsepiIso(TotalSepi<min_iso,:)=0;
AcacnesIso(TotalCacnes<min_iso,:)=0;
AsepiIso=AsepiIso./sum(AsepiIso,2);
AcacnesIso=AcacnesIso./sum(AcacnesIso,2);
AsepiIso(isnan(AsepiIso))=0;
AcacnesIso(isnan(AcacnesIso))=0;

% Figure 5C
p=figure;
min_interval_years = .5;
MinAssigned=0.70;
cutoff_real=0.01;
hold on
% this only counts people with intervals of at least .5 years
[Tcacnes] = BrayCurtisOverTime(MsubjectTime.CombinedCacnesLineages,MsubjectTime,MinAssigned,cutoff_real,"C. acnes lineages, Metagenomics",min_interval_years);
h = get(gca, 'Children');
N = numel(h);
set(h(1:N), 'Color', [.85 .85 .85]);
[Tsepi] = BrayCurtisOverTime(MsubjectTime.CombinedSepiLineages,MsubjectTime,MinAssigned,cutoff_real,"S. epidermidis lineages, Metagenomics",min_interval_years);
h = get(gca, 'Children');
N2 = numel(h);
set(h(1:(N2-N)), 'Color', 'black');
% compare the maximum observed B-C dissimilarity from each subject
CacnesMaxDifference = cellfun(@(x) max(x),Tcacnes.BetaDissimilarityFromInitial);
SepiMaxDifference = cellfun(@(x) max(x),Tsepi.BetaDissimilarityFromInitial);
[pval]=ranksum(SepiMaxDifference,CacnesMaxDifference);
text(1.25,.8,['p=' char(string(pval))])


% Figure S11
% Bray curtis of self-over-time composition for each combined metagenomics dataset above
p=figure; hold on
MinAssigned=0.70;
cutoff_real=0.00;
subplot(2,4,1)
IsoCacnesLineages = BrayCurtisOverTime(AcacnesIso,IsolateArrays,MinAssigned,cutoff_real,"C. acnes lineages, Isolates",0, ManuscriptColors);
subplot(2,4,2)
MGCacnesLineages = BrayCurtisOverTime(MsubjectTime.CombinedCacnesLineages,MsubjectTime,MinAssigned,cutoff_real,"C. acnes lineages, Metagenomics",0, ManuscriptColors);
subplot(2,4,3)
MGCacnessubphylo = BrayCurtisOverTime(MsubjectTime.cacnes_subphylolev_concatenated,MsubjectTime,MinAssigned,cutoff_real,"C. acnes subphylotypes, Metagenomics",0, ManuscriptColors);
subplot(2,4,4)
MGCacnesPhylo = BrayCurtisOverTime(MsubjectTime.CombinedCacnesPhylotypes,MsubjectTime,MinAssigned,cutoff_real,"C. acnes phylotypes, Metagenomics",0, ManuscriptColors);
subplot(2,4,5)
IsoSepiLineages = BrayCurtisOverTime(AsepiIso,IsolateArrays,MinAssigned,cutoff_real,"S. epidermidis lineages, Isolates",0, ManuscriptColors);
subplot(2,4,6)
MGSepiLineages = BrayCurtisOverTime(MsubjectTime.CombinedSepiLineages,MsubjectTime,MinAssigned,cutoff_real,"S. epidermidis lineages, Metagenomics",0, ManuscriptColors);
subplot(2,4,7)
MGSepiSubphylo = BrayCurtisOverTime(MsubjectTime.CombinedSepiSubphylo,MsubjectTime,MinAssigned,cutoff_real,"S. epidermidis subphylotypes, Metagenomics",0, ManuscriptColors);
subplot(2,4,8)
MGSepiPhylo = BrayCurtisOverTime(MsubjectTime.CombinedSepiPhylo,MsubjectTime,MinAssigned,cutoff_real,"S. epidermidis phylotypes, Metagenomics",0, ManuscriptColors);

%% plot and compare change over time for lineage level intervals

% Figure 5A-B
MinAssigned=.7;
cutoff_real=.01;

MGCacnesLineages = BrayCurtisOverTime(MsubjectTime.CombinedCacnesLineages,MsubjectTime,MinAssigned,cutoff_real,"C. acnes lineages, Metagenomics",0, ManuscriptColors);
MGSepiLineages = BrayCurtisOverTime(MsubjectTime.CombinedSepiLineages,MsubjectTime,MinAssigned,cutoff_real,"S. epidermidis lineages, Metagenomics",0, ManuscriptColors);
f=plot_braycurtis_comparison(MGCacnesLineages,MGSepiLineages,"PHLAME lineages",ManuscriptColors);

% interval lengths
D=cellfun(@diff,MGSepiLineages.TimeSinceInitial,'UniformOutput',false);
D=horzcat(D{:})

%% plot the clade-level dynamics on all subjects with at least 3 tps (Methods: Lineage diversity and sharing across subjects)
% Figure S13

cutoff_real=0;% can tune to look at more or less abundant lineages

f1 = TemporalDynamicsIndividual(AcacnesIso,IsolateArrays,MinAssigned,cutoff_real,"C. acnes lineages, Isolates");
sgtitle('isolates, C. acnes lineage-level')
f2 = TemporalDynamicsIndividual(AsepiIso,IsolateArrays,MinAssigned,cutoff_real,"S. epidermidis lineages, Isolates");
sgtitle('isolates, S. epidermidis lineage-level')
f3 = TemporalDynamicsIndividual(MsubjectTime.CombinedCacnesLineages,MsubjectTime,MinAssigned,cutoff_real,"C. acnes lins., Metagenomics, combined");
sgtitle('metagenomics, C. acnes lineage-level')
f4 = TemporalDynamicsIndividual(MsubjectTime.CombinedSepiLineages,MsubjectTime,MinAssigned,cutoff_real,"S. epidermidis lins., Metagenomics, combined");
sgtitle('metagenomics, S. epidermidis lineage-level')
f5 = TemporalDynamicsIndividual(MsubjectTime.CombinedCacnesPhylotypes,MsubjectTime,MinAssigned,cutoff_real,"C. acnes phylotypes, Metagenomics,loose");
sgtitle('metagenomics, C. acnes phylotype-level')
f6 = TemporalDynamicsIndividual(MsubjectTime.CombinedSepiSubphylo,MsubjectTime,MinAssigned,cutoff_real,"S. epidermidis subphylotypes, Metagenomics,combined");
sgtitle('metagenomics, S. epidermidis subphylotype-level')
f7 = TemporalDynamicsIndividual(MsubjectTime.CombinedSepiPhylo,MsubjectTime,MinAssigned,cutoff_real,"S. epidermidis phylotypes, Metagenomics, combined");
sgtitle('metagenomics, S. epidermidis phylotype-level')

%% plot the absolute number of subphylotypes per group (Methods: Lineage diversity and sharing across subjects)
cutoff_assigned=.7;
cutoff_real=.01;

% Figure 5F (S. epidermidis)
f1 = n_clades_by_group(MsubjectTime,MsubjectTime.CombinedSepiSubphylo,cutoff_assigned,cutoff_real,"S. epi subphylotypes, Metagenomics",ManuscriptColors);
% plot the absolute number of C. acnes Subphylotypes per group
% Figure 6E (C. acnes)
f2 = n_clades_by_group(MsubjectTime,MsubjectTime.cacnes_subphylolev_concatenated,cutoff_assigned,cutoff_real,"C. acnes subphylotypes",ManuscriptColors);


%% Get subject-wise lineage dMRCA data for subsequent plots (table S4)

LineageDMRCAs=get_lineage_dmrcas(LineageData,Msubject);

%% Difference in subject dMRCAs with the number of isolates (Methods: Subject dMRCAs)


% compare 2*pairwise distance versus dMRCA aka "branchiness" for each lineage
% Figure S9E
LineageData=plot_polarised_TD(LineageData,5);

% Figure S17B-C
% also shows branchiness for each subject for each lineage
LineageDMRCAs = dmrca_vs_d_pairwise(LineageDMRCAs,ManuscriptColors);

%% Compare directionality of transmission using lineage dMRCAs (Methods: Directionality of transmission)

% C. acnes
% Figure 4E
% Figure S9B
L = LineageDMRCAs(LineageDMRCAs.Nisolates>=3&LineageDMRCAs.Species=="cacnes",:);
total_n_lineages=numel(unique(LineageData.cladenumber(LineageData.SpeciesName=="cacnes")));
n_shared = numel(unique(L.LineageNumber(L.Unshared==0)));
[f1,f2] = shared_lineage_directionality(L,total_n_lineages,total_shared);

% S. epidermidis
% Figure 4E
% Figure S9C
L = LineageDMRCAs(LineageDMRCAs.Nisolates>=3&LineageDMRCAs.Species=="sepi"&LineageDMRCAs.Unshared==0,:);
total_n_lineages=numel(unique(LineageData.cladenumber(LineageData.SpeciesName=="sepi")));
n_shared = numel(unique(L.LineageNumber(L.Unshared==01)));total_shared=numel(unique(LineageDMRCAs.LineageNumber(LineageDMRCAs.Species=="sepi"&LineageDMRCAs.Unshared==0)));
[f1,f2] = shared_lineage_directionality(L,total_n_lineages,total_shared);

%% Compare pairwise SNP distance to jaccard genome distance as evidence for gain loss (Methods:Gene content within and across lineage assemblies)
% Figure S21

CacnesBool = tril(ones(size(CacnesClusterDM)),-1)==1;
SepiBool = tril(ones(size(SepiClusterDM)),-1)==1;

f=figure;

scatter(CacnesClusterDM(CacnesBool),DM_cacnes_genecontent(CacnesBool),'filled','MarkerFaceColor',[.85 .85 .85])
hold on
scatter(SepiClusterDM(SepiBool),DM_sepi_genecontent(SepiBool),'filled','MarkerFaceColor','black')
xlabel('pairwise SNP distance between lineages'); ylabel('Jaccard distance (genes)');
l=legend;
l.String={'C. acnes','S. epi'};

%% show that pairs of lineages from same family are not common

% Figure S22
plot_intercluster_related_unrelated(IT,CacnesLineageNumbers,SepiLineageNumbers,CacnesDM,SepiDM,CacnesLineages,SepiLineages)

%% find the minimum number of transmisssiosn needed for each lineage, assiming a single source (Methods: Number of genotype transmissions)
%Figure 4F
LineageDataCacnes=LineageData(LineageData.SpeciesName=="cacnes",:);
LineageDataSepi=LineageData(LineageData.SpeciesName=="sepi",:);

% Calculate all possible transmission patterns for both C. acnes and S.epidermidis
f=figure;
subplot(1,2,1)
[CacnesMinimumNumberTransmissions,CacnesTransmissionsMinimumPossible,CacnesAllPossibleTransmissions]=get_all_transmission_counts_pairwise(LineageDataCacnes,5,5);
ax=gca;
ax.Children.FaceColor='white';
hold on; bar(median(CacnesMinimumNumberTransmissions)+.5, 6,'BarWidth',.2,'FaceColor','black')
title('C. acnes')
subplot(1,2,2)
[SepiMinimumNumberTransmissions,SepiTransmissionsMinimumPossible,SepiAllPossibleTransmissions]=get_all_transmission_counts_pairwise(LineageDataSepi,5,5);
ax=gca;
ax.Children.FaceColor='black';
hold on; bar(median(SepiMinimumNumberTransmissions)+.5, 6,'BarWidth',.2,'FaceColor','black')
title('S. epidermidis')

% Compared the number of transmitted genotypes to the lesser of the number of isolartes from the donor and recipient
% Supplemental to number of transmitted gentypes figure above

% Figure S10
f=figure
subplot(2,1,1)
plot_minimum_transmission_n_isolates(CacnesTransmissionsMinimumPossible)
title('C. acnes')
subplot(2,1,2)
plot_minimum_transmission_n_isolates(SepiTransmissionsMinimumPossible)
h=gca;
title('S. epidermidis')
h.XLim=[0 30];
h.Children(4).MarkerFaceColor='black';


%% Find genes which are mutated more times than expected by chance (Methods: Adaptation analysis, Gene content within and across lineage assemblies)
% Figure S16A

% parse homologous clusters from the roary-formated version of the panaroo output
PanarooCacnes='data/pangenome_cacnes_lineages/gene_presence_absence_roary.csv';
PanarooSepi='data/pangenome_sepi_lineages/gene_presence_absence_roary.csv';
[HomologousClustersCacnesAssemblies, HomologousClustersSepiAssemblies]= parse_homolog_clusters(PanarooCacnes,PanarooSepi);

% prefix for both species
clade_ref_dir_cacnes=['data/clade_coassemblies/cacnes_clade_'];
clade_ref_dir_sepi=['data/clade_coassemblies/sepi_clade_'];
% get dN/dS values for both
[CacnesAnnotationsHomologues,CacnesAllProteinInfo,MutationSpectrumCacnes,clade_expected_pnonsyn_mean_cacnes]=main_muts_assemblies(cacnes_annotations_all,HomologousClustersCacnesAssemblies,clade_ref_dir_cacnes);
[SepiAnnotationsHomologues,SepiAllProteinInfo,MutationSpectrumSepi,clade_expected_pnonsyn_mean_sepi]=main_muts_assemblies(sepi_annotations_all,HomologousClustersSepiAssemblies,clade_ref_dir_sepi);

% plot Figure S16S
[parevo_cacnes_bh,parevo_cacnes_nmuts,parevo_cacnes_density]=plot_evolution_homologous_genes(CacnesAnnotationsHomologues,clade_expected_pnonsyn_mean_cacnes);
[parevo_sepi_bh,parevo_sepi_nmuts,parevo_sepi_density]=plot_evolution_homologous_genes(SepiAnnotationsHomologues,clade_expected_pnonsyn_mean_sepi);


%% Get molecular clock data for all lineages (Methods: Molecular clock estimation)


% Parse subject-wise data from lineage data
[SubjectClusterPairs,tps,root_to_tip]=molecular_clock(LineageData,5);


% Inidividual molecular clock data for for S. epidermidis and C. acnes
% Figure S14 B-C
[f1,f2,f3]=plot_molecularclocks_individual(SubjectClusterPairs,tps,root_to_tip,MsubjectTime);

% Figure S14A
% get agregate molecular clock for S. epidermisis
[SepiMolecularClockRate, p]= get_sepi_mol_clock(SubjectClusterPairs,tps,root_to_tip);

% Show that there's no clock for C. acnes (not in manuscript)
[~, p]= get_cacnes_mol_clock(SubjectClusterPairs,tps,root_to_tip);

%% Show selective sweeps are not common
% get the sweep data
[SubjectClusterPairs,MRCAs,MRCA2,anc_nts]=sweeps(LineageData,5);

% plot it for both species
% Figure S16B
plot_sweeps_individual(SubjectClusterPairs,anc_nts,MRCAs,MRCA2);

%% For both species, show that unshared lineages are not significantly older than shared ones

% Figure S17A
plot_shared_unshared_lineage_dMRCAs(LineageDMRCAs,ManuscriptColors)


%% For both species, compare dMRCAs to age (Methods: Subject dMRCAs)

clrsgroups = ManuscriptColors.CutotypeColors;
% NOTE: creates far more plots than are included in main text
% Figure 6A-D
L = LineageDMRCAs(LineageDMRCAs.Nisolates>=5&LineageDMRCAs.Species=="cacnes",:);
[fMin,fMax,fAll]=compare_lineage_dmrcas_all(L,0,L.dMRCA_subject_isolates,ManuscriptColors.CutotypeColors); %#ok<*ASGLU>

% Figure S15B
clrs_all=ManuscriptColors.CutotypeColors(L.Cutotype,:);
fStacked = dMRCA_histograms(L.Age,cellfun(@mean,L.dMRCA_subject_isolates),L.Cutotype);

% as above, for S. epidermidis
% Figure 5E-F
L = LineageDMRCAs(LineageDMRCAs.Nisolates>=5&LineageDMRCAs.Species=="sepi",:);
[fMin,fMax,fAll]=compare_lineage_dmrcas_all(L,SepiMolecularClockRate,L.dMRCA_subject_isolates,ManuscriptColors.CutotypeColors);
% figure 5D
clrs_all=clrsgroups(L.Cutotype,:);
fStacked = dMRCA_histograms(L.Age,cellfun(@mean,L.dMRCA_subject_isolates),L.Cutotype);


%% Show that these findings are not different for unshared lineages

% Figure S15D
p=figure;
L = LineageDMRCAs(LineageDMRCAs.Nisolates>=5&LineageDMRCAs.Species=="cacnes"&LineageDMRCAs.Unshared==1,:);
clrs_all=clrsgroups(L.Cutotype,:);
dmrca_plot(L.Age,cellfun(@mean,L.dMRCA_subject_isolates),0,clrs_all,'all',p)

% as above, for S. epidermidis
% Figure S15C
p=figure;
L = LineageDMRCAs(LineageDMRCAs.Nisolates>=5&LineageDMRCAs.Species=="sepi"&LineageDMRCAs.Unshared==1,:);
clrs_all=clrsgroups(L.Cutotype,:);
dmrca_plot(L.Age,cellfun(@mean,L.dMRCA_subject_isolates),0,clrs_all,'all',p)

%% Parse supplemental data files from Oh et al. 2016
% Figure S12

Metadata = readtable('Oh et al patient metadata.csv'); %Table S1
CacnesAbundances = readtable('Oh et al Cacnes.csv'); %Table S3
SepiAbundances = readtable('Oh et al Sepi.csv'); %Table S5

% Pull out first column, which is names of different strains
SepiTaxa = table2array(SepiAbundances(2:end,1));
CacnesTaxa = table2array(CacnesAbundances(2:end,1));
% Pull out rows, which are the names of metagenome samples
CacnesSampleNames = string(CacnesAbundances.Properties.VariableNames(2:end));
SepiSampleNames = string(SepiAbundances.Properties.VariableNames(2:end));
% Pull out abundances and normalize (currently add up to 100, and them to add to 1)
CacnesAbundances = table2array(CacnesAbundances(2:end,2:end))./100;
SepiAbundances = table2array(SepiAbundances(2:end,2:end))./100;

% There are twelve unique subjects in the metadata:
% ["HV01" "HV02" "HV03" "HV04" "HV05" "HV06" "HV07" "HV08"]
%  Transform field "Designation" to a subject number for each row which is
%  easier to work with in Matlab
Metadata.SubjectNumber = cellfun(@(x) str2double(x(3:4)), Metadata.Designation);
% Format collection data
Metadata.DateCollected=datetime(Metadata.DateCollected,'Format','MM.dd.yy');
%
locations_all_right_side=["Al-R"	"Ba-R"	"Ch-R"	"Ea-R"	"Mb-R"	"Oc-R"	"Ra-R"	"Hp-R"	"Vf-R"	"Ac-R"	"Ic-R"	"Id-R"	"Pc-R"	"Ph-R"	"Tn-R"	"Tw-R"];
locations_all_right_side=["Al-R"	"Ba-R"	"Ch-R"	"Ea-R"	"Mb-R"	"Oc-R"	"Ra-R"	"Hp-R"	"Vf-R"	"Ac-R"	"Ic-R"	"Id-R"	"Pc-R"	"Ph-R"	"Tn-R"	"Tw-R"];
%
AllIntervalData=get_intervals_oh_et_al(Metadata,locations_all_right_side,CacnesAbundances,SepiAbundances,CacnesSampleNames,SepiSampleNames);
plot_intervals_oh_et_al(AllIntervalData)

%% save important data structures to SI


% Assume the following variables already exist in your workspace:
% SampleInfo, CDHITData, ncbi_references, AssemblyStats, T_all, Mtubes, ...
% MsubjectTime, Msubject, T, LineageData, LineageDMRCAs, AllPossibleTransmissionPatterns, 
% gain_loss_all, tbs_all, names, IT, cacnes_annotations_all, sepi_annotations_all, 
% HomologousClustersCacnesAssemblies, HomologousClustersSepiAssemblies, CacnesAllProteinInfo, 
% SepiAllProteinInfo, CacnesAnnotationsHomologues, SepiAnnotationsHomologues


load data/CladeAssemblyCutoffHeights.mat Clades CutoffHeights

% Create a structure with all required data:
dataStruct = struct(...
    'SampleInfo', readtable('data/subject_metadata.csv'), ...
    'CDHITData', CDHITData, ...
    'ncbi_references', ncbi_references, ...
    'AssemblyStats', AssemblyStats, ...
    'T_all', readtable('data/cluster_assemblies_with_outgroup_no_singletons_no_doubletons.csv'), ...
    'Mtubes', Mtubes, ...
    'MsubjectTime', MsubjectTime, ...
    'Msubject', Msubject, ...
    'LineageData', LineageData, ...
    'LineageDMRCAs', LineageDMRCAs, ...
    'AllPossibleTransmissionPatternsCacnes', SepiAllPossibleTransmissions, ...
    'AllPossibleTransmissionPatternsSepi', CacnesAllPossibleTransmissions, ...
    'IT', IT, ...
    'Clades',Clades,...
    'CutoffHeights',CutoffHeights,...
    'cacnes_annotations_all', cacnes_annotations_all, ...
    'sepi_annotations_all', sepi_annotations_all, ...
    'HomologousClustersCacnesAssemblies', HomologousClustersCacnesAssemblies, ...
    'HomologousClustersSepiAssemblies', HomologousClustersSepiAssemblies, ...
    'CacnesAllProteinInfo', CacnesAllProteinInfo, ...
    'SepiAllProteinInfo', SepiAllProteinInfo, ...
    'CacnesAnnotationsHomologues', CacnesAnnotationsHomologues, ...
    'MetagenomicsSampleNames',readtable('data/metagenomics_sample_barcodes.csv','Delimiter',','),...
    'SepiAnnotationsHomologues', SepiAnnotationsHomologues);

save('all_data.mat','dataStruct','-v7.3')
%% save dataStruct
% Now call the function to save all data into the 6 Excel files
saveSupplementaryTablesExcel(dataStruct);



